{"version":3,"file":"connection-handler-simple-peer.js","names":["_rxjs","require","_index","_simplePeer","_interopRequireDefault","_rxError","getConnectionHandlerSimplePeer","serverUrl","wrtc","creator","options","io","socket","peerId","randomCouchString","emit","room","topic","connect$","Subject","disconnect$","message$","response$","error$","peers","Map","on","roomPeerIds","forEach","remotePeerId","has","newPeer","Peer","initiator","trickle","set","messageOrResponse","JSON","parse","toString","result","next","peer","response","message","signal","from","to","error","newRxError","data","getFromMapOrThrow","handler","send","stringify","destroy","close","complete","PROMISE_RESOLVE_VOID"],"sources":["../../../../src/plugins/replication-webrtc/connection-handler-simple-peer.ts"],"sourcesContent":["import { Subject } from 'rxjs';\nimport {\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from '../../plugins/utils/index.ts';\nimport type {\n    WebRTCConnectionHandler,\n    WebRTCConnectionHandlerCreator,\n    WebRTCMessage,\n    WebRTCPeer,\n    PeerWithMessage,\n    PeerWithResponse\n} from './webrtc-types.ts';\n\nimport {\n    Instance as SimplePeer,\n    default as Peer\n} from 'simple-peer';\nimport type { RxError, RxTypeError } from '../../types/index.d.ts';\nimport { newRxError } from '../../rx-error.ts';\n\n/**\n * Returns a connection handler that uses simple-peer and the signaling server.\n */\nexport function getConnectionHandlerSimplePeer(\n    serverUrl: string,\n    wrtc?: any\n): WebRTCConnectionHandlerCreator {\n\n\n    const creator: WebRTCConnectionHandlerCreator = async (options) => {\n        const { io } = await import('socket.io-client');\n        const socket = io(serverUrl);\n\n        const peerId = randomCouchString(10);\n        socket.emit('join', {\n            room: options.topic,\n            peerId\n        });\n\n        const connect$ = new Subject<WebRTCPeer>();\n        const disconnect$ = new Subject<WebRTCPeer>();\n        const message$ = new Subject<PeerWithMessage>();\n        const response$ = new Subject<PeerWithResponse>();\n        const error$ = new Subject<RxError | RxTypeError>();\n\n        const peers = new Map<string, SimplePeer>();\n\n        socket.on('joined', (roomPeerIds: string[]) => {\n            roomPeerIds.forEach(remotePeerId => {\n                if (\n                    remotePeerId === peerId ||\n                    peers.has(remotePeerId)\n                ) {\n                    return;\n                }\n                // console.log('other user joined room ' + remotePeerId);\n                const newPeer: SimplePeer = new Peer({\n                    initiator: remotePeerId > peerId,\n                    wrtc,\n                    trickle: true\n                }) as any;\n                peers.set(remotePeerId, newPeer);\n\n\n                newPeer.on('data', (messageOrResponse: any) => {\n                    messageOrResponse = JSON.parse(messageOrResponse.toString());\n                    // console.log('got a message from peer3: ' + messageOrResponse)\n                    if (messageOrResponse.result) {\n                        response$.next({\n                            peer: newPeer as any,\n                            response: messageOrResponse\n                        });\n                    } else {\n                        message$.next({\n                            peer: newPeer as any,\n                            message: messageOrResponse\n                        });\n                    }\n                });\n\n                newPeer.on('signal', (signal: any) => {\n                    // console.log('emit signal from ' + peerId + ' to ' + remotePeerId);\n                    socket.emit('signal', {\n                        from: peerId,\n                        to: remotePeerId,\n                        room: options.topic,\n                        signal\n                    });\n                });\n\n                newPeer.on('error', (error) => {\n                    error$.next(newRxError('RC_WEBRTC_PEER', {\n                        error\n                    }));\n                });\n\n                newPeer.on('connect', () => {\n                    connect$.next(newPeer as any);\n                });\n\n            });\n        });\n\n        socket.on('signal', (data: any) => {\n            // console.log('got signal(' + peerId + ') ' + data.from + ' -> ' + data.to);\n            const peer = getFromMapOrThrow(peers, data.from);\n            peer.signal(data.signal);\n        });\n\n        const handler: WebRTCConnectionHandler = {\n            error$,\n            connect$,\n            disconnect$,\n            message$,\n            response$,\n            async send(peer: WebRTCPeer, message: WebRTCMessage) {\n                await (peer as any).send(JSON.stringify(message));\n            },\n            destroy() {\n                socket.close();\n                error$.complete();\n                connect$.complete();\n                disconnect$.complete();\n                message$.complete();\n                response$.complete();\n                return PROMISE_RESOLVE_VOID;\n            }\n        };\n        return handler;\n    };\n    return creator;\n}\n"],"mappings":"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"}