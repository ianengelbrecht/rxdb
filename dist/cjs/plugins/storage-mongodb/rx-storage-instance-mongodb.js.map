{"version":3,"file":"rx-storage-instance-mongodb.js","names":["_rxjs","require","_rxSchemaHelper","_index","_mongodb","_rxStorageHelper","_mongodbHelper","RxStorageInstanceMongoDB","exports","storage","databaseName","collectionName","schema","internals","options","settings","changes$","Subject","runningOperations","BehaviorSubject","writeQueue","PROMISE_RESOLVE_VOID","mongoObjectIdCache","WeakMap","attachments","Error","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","inMongoPrimaryPath","MONGO_ID_SUBSTITUTE_FIELDNAME","mongoClient","MongoClient","databaseSettings","connection","mongoDatabase","db","version","indexes","slice","map","index","arIndex","isMaybeReadonlyArray","push","mongoCollectionPromise","createCollection","then","mongoCollection","createIndexes","mongoIndex","forEach","field","name","getMongoDBIndexName","key","_proto","prototype","bulkWrite","documentWrites","context","next","getValue","closed","Promise","reject","ret","success","error","docIds","d","document","documentStates","findDocumentsById","documentStatesMap","Map","doc","docId","set","categorized","categorizeBulkWriteRows","errors","eventBulk","events","all","bulkInsertDocs","writeRow","writeResult","findOneAndUpdate","$setOnInsert","swapRxDocToMongo","upsert","includeResultMetadata","value","conflictError","status","documentId","documentInDb","swapMongoToRxDoc","ensureNotFalsy","isError","event","changeByDocId","get","bulkUpdateDocs","findOneAndReplace","_rev","previous","returnDocument","ok","currentDocState","currentDoc","getFromMapOrThrow","length","lastState","newestRow","checkpoint","id","lwt","_meta","withDeleted","session","plainQuery","$in","_deleted","result","queryResult","find","toArray","row","query","preparedQuery","mongoSelector","skip","limit","sort","mongoSort","resultDocs","documents","count","countDocuments","mode","info","totalCount","getChangedDocumentsSince","sinceLwt","RX_META_LWT_MINIMUM","$or","$gt","$eq","lastDoc","lastOfArray","cleanup","minimumDeletedTime","maxDeletionTime","now","deleteMany","$lt","getAttachmentData","_documentId","_attachmentId","_digest","changeStream","remove","drop","close","requestIdlePromise","firstValueFrom","pipe","filter","c","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createMongoDBStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/storage-mongodb/rx-storage-instance-mongodb.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Observable,\n    Subject,\n    filter,\n    firstValueFrom\n} from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInfoResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageWriteErrorConflict,\n    StringKeys\n} from '../../types/index.d.ts';\nimport {\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    isMaybeReadonlyArray,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise,\n    RX_META_LWT_MINIMUM\n} from '../../plugins/utils/index.ts';\nimport {\n    MongoDBPreparedQuery,\n    MongoDBStorageInternals,\n    MongoQuerySelector,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageMongoDBSettings\n} from './mongodb-types.ts';\nimport { RxStorageMongoDB } from './rx-storage-mongodb.ts';\nimport {\n    Db as MongoDatabase,\n    Collection as MongoCollection,\n    MongoClient,\n    ObjectId,\n    ClientSession\n} from 'mongodb';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport {\n    MONGO_ID_SUBSTITUTE_FIELDNAME,\n    getMongoDBIndexName,\n    swapMongoToRxDoc,\n    swapRxDocToMongo\n} from './mongodb-helper.ts';\n\nexport class RxStorageInstanceMongoDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MongoDBStorageInternals,\n    RxStorageMongoDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public readonly inMongoPrimaryPath: string;\n    public closed?: Promise<void>;\n    private readonly changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly mongoClient: MongoClient;\n    public readonly mongoDatabase: MongoDatabase;\n    public readonly mongoCollectionPromise: Promise<MongoCollection<RxDocumentData<RxDocType> | any>>;\n    // public mongoChangeStream?: MongoChangeStream<any, ChangeStreamDocument<any>>;\n\n\n    /**\n     * Closing the connection must not happen when\n     * an operation is running, otherwise we get an error.\n     * So we store all running operations here so that\n     * they can be awaited.\n     */\n    public readonly runningOperations = new BehaviorSubject(0);\n    public writeQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    /**\n     * We use this to be able to still fetch\n     * the objectId after transforming the document from mongo-style (with _id)\n     * to RxDB\n     */\n    public readonly mongoObjectIdCache = new WeakMap<RxDocumentData<RxDocType>, ObjectId>();\n\n    constructor(\n        public readonly storage: RxStorageMongoDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MongoDBStorageInternals,\n        public readonly options: Readonly<RxStorageMongoDBInstanceCreationOptions>,\n        public readonly settings: RxStorageMongoDBSettings\n    ) {\n        if (this.schema.attachments) {\n            throw new Error('attachments not supported in mongodb storage, make a PR if you need that');\n        }\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        this.inMongoPrimaryPath = this.primaryPath === '_id' ? MONGO_ID_SUBSTITUTE_FIELDNAME : this.primaryPath;\n        this.mongoClient = new MongoClient(storage.databaseSettings.connection);\n        this.mongoDatabase = this.mongoClient.db(databaseName + '-v' + this.schema.version);\n\n        const indexes = (this.schema.indexes ? this.schema.indexes.slice() : []).map(index => {\n            const arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n            return arIndex;\n        });\n        indexes.push([this.inMongoPrimaryPath]);\n\n        this.mongoCollectionPromise = this.mongoDatabase.createCollection(collectionName)\n            .then(async (mongoCollection) => {\n                await mongoCollection.createIndexes(\n                    indexes.map(index => {\n                        const mongoIndex: any = {};\n                        index.forEach(field => mongoIndex[field] = 1);\n                        return { name: getMongoDBIndexName(index), key: mongoIndex };\n                    })\n                );\n\n                /**\n                 * TODO in a setup where multiple servers run node.js\n                 * processes that use the mongodb storage, we should propagate\n                 * events by listening to the mongodb changestream.\n                 * This maybe should be a premium feature.\n                 */\n                // this.mongoChangeStream = mongoCollection.watch(\n                //     undefined, {\n                //     batchSize: 100\n                // }\n                // ).on('change', change => {\n\n\n                //     const eventBulkId = randomCouchString(10);\n                //     const newDocData: RxDocumentData<RxDocType> = (change as any).fullDocument;\n                //     const documentId = newDocData[this.primaryPath] as any;\n\n                //     const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint> = {\n                //         checkpoint: {\n                //             id: newDocData[this.primaryPath] as any,\n                //             lwt: newDocData._meta.lwt\n                //         },\n                //         context: 'mongodb-write',\n                //         id: eventBulkId,\n                //         events: [{\n                //             documentData: newDocData,\n                //             documentId,\n                //             eventId: randomCouchString(10),\n                //             operation: 'INSERT',\n                //             previousDocumentData: undefined,\n                //             startTime: now(),\n                //             endTime: now()\n                //         }]\n                //     };\n\n                //     this.changes$.next(eventBulk);\n                // });\n\n\n                return mongoCollection;\n            });\n\n\n    }\n\n    /**\n     * Bulk writes on the mongodb storage.\n     * Notice that MongoDB does not support cross-document transactions\n     * so we have to do a update-if-previous-is-correct like operations.\n     * (Similar to what RxDB does with the revision system)\n     */\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n\n        this.writeQueue = this.writeQueue.then(async () => {\n            this.runningOperations.next(this.runningOperations.getValue() + 1);\n\n            const mongoCollection = await this.mongoCollectionPromise;\n            if (this.closed) {\n                return Promise.reject(new Error('already closed'));\n            }\n            const primaryPath = this.primaryPath;\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: [],\n                error: []\n            };\n\n\n            const docIds = documentWrites.map(d => (d.document as any)[primaryPath]);\n            const documentStates = await this.findDocumentsById(\n                docIds,\n                true\n            );\n            const documentStatesMap = new Map();\n            documentStates.forEach(doc => {\n                const docId = doc[primaryPath];\n                documentStatesMap.set(docId, doc);\n            });\n            const categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                primaryPath as any,\n                documentStatesMap,\n                documentWrites,\n                context\n            );\n            ret.error = categorized.errors;\n\n            /**\n             * Reset the event bulk because\n             * conflicts can still appear after the categorization\n             */\n            const eventBulk = categorized.eventBulk;\n            eventBulk.events = [];\n\n            await Promise.all([\n                /**\n                 * Inserts\n                 * @link https://sparkbyexamples.com/mongodb/mongodb-insert-if-not-exists/\n                 */\n                Promise.all(\n                    categorized.bulkInsertDocs.map(async (writeRow) => {\n                        const docId: string = writeRow.document[primaryPath] as any;\n                        const writeResult = await mongoCollection.findOneAndUpdate(\n                            {\n                                [this.inMongoPrimaryPath]: docId\n                            },\n                            {\n                                $setOnInsert: swapRxDocToMongo(writeRow.document)\n                            },\n                            {\n                                upsert: true,\n                                includeResultMetadata: true\n                            }\n                        );\n                        if (writeResult.value) {\n                            // had insert conflict\n                            const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                                status: 409,\n                                documentId: docId,\n                                writeRow,\n                                documentInDb: swapMongoToRxDoc(ensureNotFalsy(writeResult.value)),\n                                isError: true\n                            };\n                            ret.error.push(conflictError);\n                        } else {\n                            const event = categorized.changeByDocId.get(docId);\n                            if (event) {\n                                eventBulk.events.push(event);\n                            }\n                            ret.success.push(writeRow.document);\n                        }\n                    })\n                ),\n                /**\n                 * Updates\n                 */\n                Promise.all(\n                    categorized.bulkUpdateDocs.map(async (writeRow) => {\n                        const docId = writeRow.document[primaryPath] as string;\n                        const writeResult = await mongoCollection.findOneAndReplace(\n                            {\n                                [this.inMongoPrimaryPath]: docId,\n                                _rev: ensureNotFalsy(writeRow.previous)._rev\n                            },\n                            swapRxDocToMongo(writeRow.document),\n                            {\n                                includeResultMetadata: true,\n                                upsert: false,\n                                returnDocument: 'before'\n                            }\n                        );\n                        if (!writeResult.ok) {\n                            const currentDocState = await this.findDocumentsById([docId], true);\n                            const currentDoc = currentDocState[0];\n                            // had insert conflict\n                            const conflictError: RxStorageWriteErrorConflict<RxDocType> = {\n                                status: 409,\n                                documentId: docId,\n                                writeRow,\n                                documentInDb: ensureNotFalsy(currentDoc),\n                                isError: true\n                            };\n                            ret.error.push(conflictError);\n                        } else {\n                            const event = getFromMapOrThrow(categorized.changeByDocId, docId);\n                            eventBulk.events.push(event);\n                            ret.success.push(writeRow.document);\n                        }\n\n                    })\n                )\n            ]);\n\n            if (categorized.eventBulk.events.length > 0) {\n                const lastState = ensureNotFalsy(categorized.newestRow).document;\n                categorized.eventBulk.checkpoint = {\n                    id: lastState[primaryPath],\n                    lwt: lastState._meta.lwt\n                };\n                this.changes$.next(categorized.eventBulk);\n            }\n\n            this.runningOperations.next(this.runningOperations.getValue() - 1);\n            return ret;\n        });\n        return this.writeQueue;\n\n    }\n\n    async findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean,\n        session?: ClientSession\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const primaryPath = this.primaryPath;\n\n        const plainQuery: MongoQuerySelector<any> = {\n            [primaryPath]: {\n                $in: docIds\n            }\n        };\n        if (!withDeleted) {\n            plainQuery._deleted = false;\n        }\n        const result: RxDocumentData<RxDocType>[] = [];\n        const queryResult = await mongoCollection.find(\n            plainQuery,\n            {\n                session\n            }\n        ).toArray();\n        queryResult.forEach(row => {\n            result.push(\n                swapMongoToRxDoc(\n                    row as any\n                )\n            );\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return result;\n    }\n\n    async query(\n        preparedQuery: MongoDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await this.writeQueue;\n        const mongoCollection = await this.mongoCollectionPromise;\n\n        let query = mongoCollection.find(preparedQuery.mongoSelector);\n        if (preparedQuery.query.skip) {\n            query = query.skip(preparedQuery.query.skip);\n        }\n        if (preparedQuery.query.limit) {\n            query = query.limit(preparedQuery.query.limit);\n        }\n        if (preparedQuery.query.sort) {\n            query = query.sort(preparedQuery.mongoSort);\n        }\n        const resultDocs = await query.toArray();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            documents: resultDocs.map(d => swapMongoToRxDoc(d))\n        };\n    }\n\n    async count(\n        preparedQuery: MongoDBPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await this.writeQueue;\n        const mongoCollection = await this.mongoCollectionPromise;\n        const count = await mongoCollection.countDocuments(preparedQuery.mongoSelector);\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            count,\n            mode: 'fast'\n        };\n    }\n\n    async info(): Promise<RxStorageInfoResult> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        await this.writeQueue;\n        const mongoCollection = await this.mongoCollectionPromise;\n        const totalCount = await mongoCollection.countDocuments();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            totalCount\n        };\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const plainQuery = {\n            $or: [\n                {\n                    '_meta.lwt': {\n                        $gt: sinceLwt\n                    }\n                },\n                {\n                    '_meta.lwt': {\n                        $eq: sinceLwt\n                    },\n                    [this.inMongoPrimaryPath]: {\n                        $gt: checkpoint ? checkpoint.id : ''\n                    }\n                }\n            ]\n        };\n        const query = mongoCollection.find(plainQuery)\n            .sort({\n                '_meta.lwt': 1,\n                [this.inMongoPrimaryPath]: 1\n            })\n            .limit(limit);\n        const documents = await query.toArray();\n        const lastDoc = lastOfArray(documents);\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return {\n            documents: documents.map(d => swapMongoToRxDoc(d)),\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath],\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        await mongoCollection.deleteMany({\n            _deleted: true,\n            '_meta.lwt': {\n                $lt: maxDeletionTime\n            }\n        });\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        return true;\n    }\n\n    async getAttachmentData(\n        _documentId: string,\n        _attachmentId: string,\n        _digest: string\n    ): Promise<string> {\n        await this.mongoCollectionPromise;\n        throw new Error('attachments not implemented, make a PR');\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$;\n    }\n\n    async remove(): Promise<void> {\n        if (this.closed) {\n            throw new Error('already closed');\n        }\n        this.runningOperations.next(this.runningOperations.getValue() + 1);\n        const mongoCollection = await this.mongoCollectionPromise;\n        await mongoCollection.drop();\n        this.runningOperations.next(this.runningOperations.getValue() - 1);\n        await this.close();\n    }\n\n    async close(): Promise<void> {\n        // TODO without this next-tick we have random fails in the tests\n        await requestIdlePromise(200);\n\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            await this.mongoCollectionPromise;\n            await firstValueFrom(this.runningOperations.pipe(filter(c => c === 0)));\n            // await ensureNotFalsy(this.mongoChangeStream).close();\n            await this.mongoClient.close();\n        })();\n        return this.closed;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n\nexport function createMongoDBStorageInstance<RxDocType>(\n    storage: RxStorageMongoDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMongoDBInstanceCreationOptions>,\n    settings: RxStorageMongoDBSettings\n): Promise<RxStorageInstanceMongoDB<RxDocType>> {\n    const instance = new RxStorageInstanceMongoDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        {},\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}