{"version":3,"file":"rx-storage-instance-dexie.js","names":["Subject","now","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","sortDocumentsByLastWriteTime","lastOfArray","ensureNotFalsy","appendToArray","closeDexieDb","fromDexieToStorage","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","RX_STORAGE_NAME_DEXIE","dexieCount","dexieQuery","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","addRxStorageMultiInstanceSupport","newRxError","instanceId","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","changes$","primaryPath","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensureNotClosed","forEach","row","document","_rev","previous","args","state","ret","success","error","documentKeys","map","writeRow","categorized","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDbMap","Map","docsInDbWithInternals","docWithDexieInternals","doc","set","errors","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","bulkInsertDocs","push","bulkUpdateDocs","docId","_deleted","Promise","all","length","bulkPut","d","bulkDelete","eventBulk","events","lastState","newestRow","checkpoint","id","lwt","_meta","endTime","event","next","findDocumentsById","ids","deleted","docsInDb","bulkGet","idx","documentInDb","query","preparedQuery","count","queryPlan","selectorSatisfiedByIndex","result","mode","documents","info","totalCount","_dexieTx","nonDeleted","getChangedDocumentsSince","limit","sinceLwt","sinceId","changedDocsNormal","changedDocsDeleted","table","where","above","changedDocuments","toArray","changedDocs","slice","lastDoc","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","toRemove","below","removeIds","getAttachmentData","_documentId","_attachmentId","_digest","Error","remove","clear","close","closed","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/storage-dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray,\n    ensureNotFalsy,\n    appendToArray\n} from '../utils/index.ts';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput,\n    RxStorageCountResult,\n    DefaultPreparedQuery,\n    RxStorageInfoResult\n} from '../../types/index.d.ts';\nimport type {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie.d.ts';\nimport { RxStorageDexie } from './rx-storage-dexie.ts';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper.ts';\nimport { dexieCount, dexieQuery } from './dexie-query.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance.ts';\nimport { newRxError } from '../../rx-error.ts';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed?: Promise<void>;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n\n\n        /**\n         * Check some assumptions to ensure RxDB\n         * does not call the storage with an invalid write.\n         */\n        documentWrites.forEach(row => {\n            // ensure revision is set\n            if (\n                !row.document._rev ||\n                (\n                    row.previous &&\n                    !row.previous._rev\n                )\n            ) {\n                throw newRxError('SNH', { args: { row } });\n            }\n        });\n\n\n\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                const docsInDbMap = new Map<string, RxDocumentData<RxDocType>>();\n                const docsInDbWithInternals = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDbWithInternals.forEach(docWithDexieInternals => {\n                    const doc = docWithDexieInternals ? fromDexieToStorage(docWithDexieInternals) : docWithDexieInternals;\n                    if (doc) {\n                        docsInDbMap.set(doc[this.primaryPath], doc);\n                    }\n                    return doc;\n                });\n\n                categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDbMap,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n\n                categorized.bulkInsertDocs.forEach(row => {\n                    ret.success.push(row.document);\n                    bulkPutDocs.push(row.document);\n                });\n                categorized.bulkUpdateDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success.push(row.document);\n                    if (\n                        row.document._deleted &&\n                        (row.previous && !row.previous._deleted)\n                    ) {\n                        // newly deleted\n                        bulkRemoveDocs.push(docId);\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (\n                        row.document._deleted &&\n                        row.previous && row.previous._deleted\n                    ) {\n                        // deleted was modified but is still deleted\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (!row.document._deleted) {\n                        // non-deleted was changed\n                        bulkPutDocs.push(row.document);\n                    } else {\n                        throw newRxError('SNH', { args: { row } });\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        categorized = ensureNotFalsy(categorized);\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            const endTime = now();\n            categorized.eventBulk.events.forEach(event => (event as any).endTime = endTime);\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentData<RxDocType>[] = [];\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids);\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret.push(fromDexieToStorage(documentInDb));\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DefaultPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n    async count(\n        preparedQuery: DefaultPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        if (preparedQuery.queryPlan.selectorSatisfiedByIndex) {\n            const result = await dexieCount(this, preparedQuery);\n            return {\n                count: result,\n                mode: 'fast'\n            };\n        } else {\n            const result = await dexieQuery(this, preparedQuery);\n            return {\n                count: result.documents.length,\n                mode: 'slow'\n            };\n        }\n    }\n\n    async info(): Promise<RxStorageInfoResult> {\n        const state = await this.internals;\n        const ret: RxStorageInfoResult = {\n            totalCount: -1\n        };\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async (_dexieTx) => {\n                const [nonDeleted, deleted] = await Promise.all([\n                    state.dexieTable.count(),\n                    state.dexieDeletedTable.count()\n                ]);\n                ret.totalCount = nonDeleted + deleted;\n            }\n        );\n\n        return ret;\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.slice(0);\n        appendToArray(changedDocs, changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string, _digest: string): Promise<string> {\n        ensureNotClosed(this);\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            await closeDexieDb(this.internals);\n        })();\n        return this.closed;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}