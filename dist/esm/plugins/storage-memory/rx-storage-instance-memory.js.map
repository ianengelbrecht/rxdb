{"version":3,"file":"rx-storage-instance-memory.js","names":["Subject","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","deepEqual","ensureNotFalsy","lastOfArray","now","PROMISE_RESOLVE_TRUE","PROMISE_RESOLVE_VOID","requestIdlePromise","RX_META_LWT_MINIMUM","boundGE","boundGT","boundLE","boundLT","attachmentMapKey","compareDocsWithIndex","ensureNotRemoved","getMemoryCollectionKey","putWriteRowToState","removeDocFromState","addIndexesToInternalsState","getMemoryIndexName","getQueryMatcher","getSortComparator","OPEN_MEMORY_INSTANCES","Set","RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","closed","add","primaryPath","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensurePersistence","documentsById","documents","categorized","error","errors","success","Array","bulkInsertDocs","length","i","writeRow","doc","document","bulkUpdateDocs","push","ensurePersistenceTask","ensurePersistenceIdlePromise","then","undefined","eventBulk","events","lastState","newestRow","checkpoint","id","lwt","_meta","changes$","next","Promise","resolve","stateByIndex","Object","values","byIndex","docId","get","attachments","attachmentsMap","attachmentsAdd","forEach","attachment","set","documentId","attachmentId","writeData","attachmentData","digest","attachmentsUpdate","attachmentsRemove","delete","findDocumentsById","docIds","withDeleted","ret","size","docInDb","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","inclusiveStart","upperBound","endKeys","upperBoundString","inclusiveEnd","indexName","docsWithIndex","indexOfLower","indexString","indexOfUpper","rows","done","currentRow","currentDoc","sortComparator","sort","slice","count","result","mode","info","totalCount","getChangedDocumentsSince","sinceLwt","sinceId","lastDoc","cleanup","minimumDeletedTime","maxDeletionTime","getAttachmentData","key","data","Error","changeStream","asObservable","remove","removed","collectionStates","version","close","refCount","conflictResultionTasks","conflictResultionTasks$","resolveConflictResultionTask","_taskSolution","createMemoryStorageInstance","params","collectionKey","Map","devMode","instance"],"sources":["../../../../src/plugins/storage-memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper.ts';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    QueryMatcher,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInfoResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types/index.d.ts';\nimport {\n    deepEqual,\n    ensureNotFalsy,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise,\n    RX_META_LWT_MINIMUM\n} from '../../plugins/utils/index.ts';\nimport {\n    boundGE,\n    boundGT,\n    boundLE,\n    boundLT\n} from './binary-search-bounds.ts';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper.ts';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes.ts';\nimport type {\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types.ts';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\n\n\n/**\n * Used in tests to ensure everything\n * is closed correctly\n */\nexport const OPEN_MEMORY_INSTANCES = new Set<RxStorageInstanceMemory<any>>();\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        OPEN_MEMORY_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        this.ensurePersistence();\n        ensureNotRemoved(this);\n        const internals = this.internals;\n        const documentsById = this.internals.documents;\n        const primaryPath = this.primaryPath;\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            primaryPath as any,\n            documentsById,\n            documentWrites,\n            context\n        );\n        const error = categorized.errors;\n        const success: RxDocumentData<RxDocType>[] = new Array(categorized.bulkInsertDocs.length);\n        const bulkInsertDocs = categorized.bulkInsertDocs;\n        for (let i = 0; i < bulkInsertDocs.length; ++i) {\n            const writeRow = bulkInsertDocs[i];\n            const doc = writeRow.document;\n            success[i] = doc;\n        }\n        const bulkUpdateDocs = categorized.bulkUpdateDocs;\n        for (let i = 0; i < bulkUpdateDocs.length; ++i) {\n            const writeRow = bulkUpdateDocs[i];\n            const doc = writeRow.document;\n            success.push(doc);\n        }\n\n        this.internals.ensurePersistenceTask = categorized;\n        if (!this.internals.ensurePersistenceIdlePromise) {\n            this.internals.ensurePersistenceIdlePromise = requestIdlePromise(1000).then(() => {\n                this.internals.ensurePersistenceIdlePromise = undefined;\n                this.ensurePersistence();\n            });\n        }\n\n        /**\n         * Important: The events must be emitted AFTER the persistence\n         * task has been added.\n         */\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            internals.changes$.next(categorized.eventBulk);\n        }\n\n        return Promise.resolve({ success, error });\n    }\n\n    /**\n     * Instead of directly inserting the documents into all indexes,\n     * we do it lazy in the background. This gives the application time\n     * to directly work with the write-result and to do stuff like rendering DOM\n     * notes and processing RxDB queries.\n     * Then in some later time, or just before the next read/write,\n     * it is ensured that the indexes have been written.\n     */\n    public ensurePersistence() {\n        if (\n            !this.internals.ensurePersistenceTask\n        ) {\n            return;\n        }\n        const internals = this.internals;\n        const documentsById = this.internals.documents;\n        const primaryPath = this.primaryPath;\n\n        const categorized = this.internals.ensurePersistenceTask;\n        delete this.internals.ensurePersistenceTask;\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        const bulkInsertDocs = categorized.bulkInsertDocs;\n        for (let i = 0; i < bulkInsertDocs.length; ++i) {\n            const writeRow = bulkInsertDocs[i];\n            const doc = writeRow.document;\n            const docId = doc[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                internals,\n                stateByIndex,\n                writeRow,\n                undefined\n            );\n        }\n\n        const bulkUpdateDocs = categorized.bulkUpdateDocs;\n        for (let i = 0; i < bulkUpdateDocs.length; ++i) {\n            const writeRow = bulkUpdateDocs[i];\n            const doc = writeRow.document;\n            const docId = doc[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                internals,\n                stateByIndex,\n                writeRow,\n                documentsById.get(docId as any)\n            );\n        }\n\n        /**\n         * Handle attachments\n         */\n        if (this.schema.attachments) {\n            const attachmentsMap = internals.attachments;\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentsMap.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    {\n                        writeData: attachment.attachmentData,\n                        digest: attachment.digest\n                    }\n                );\n            });\n            if (this.schema.attachments) {\n                categorized.attachmentsUpdate.forEach(attachment => {\n                    attachmentsMap.set(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                        {\n                            writeData: attachment.attachmentData,\n                            digest: attachment.digest\n                        }\n                    );\n                });\n                categorized.attachmentsRemove.forEach(attachment => {\n                    attachmentsMap.delete(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                    );\n                });\n            }\n        }\n    }\n\n    findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        this.ensurePersistence();\n        const documentsById = this.internals.documents;\n        const ret: RxDocumentData<RxDocType>[] = [];\n        if (documentsById.size === 0) {\n            return Promise.resolve(ret);\n        }\n        for (let i = 0; i < docIds.length; ++i) {\n            const docId = docIds[i];\n            const docInDb = documentsById.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret.push(docInDb);\n            }\n        }\n        return Promise.resolve(ret);\n    }\n\n    query(\n        preparedQuery: MemoryPreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        this.ensurePersistence();\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n        if (!queryPlan.selectorSatisfiedByIndex) {\n            queryMatcher = getQueryMatcher(\n                this.schema,\n                preparedQuery.query\n            );\n        }\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound,\n            queryPlan.inclusiveStart\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound,\n            queryPlan.inclusiveEnd\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        let indexOfLower = (queryPlan.inclusiveStart ? boundGE : boundGT)(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n        const indexOfUpper = (queryPlan.inclusiveEnd ? boundLE : boundLT)(\n            docsWithIndex,\n            {\n                indexString: upperBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentRow = docsWithIndex[indexOfLower];\n            if (\n                !currentRow ||\n                indexOfLower > indexOfUpper\n            ) {\n                break;\n            }\n            const currentDoc = currentRow.doc;\n\n            if (!queryMatcher || queryMatcher(currentDoc)) {\n                rows.push(currentDoc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            const sortComparator = getSortComparator(this.schema, preparedQuery.query);\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    async count(\n        preparedQuery: MemoryPreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        this.ensurePersistence();\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    info(): Promise<RxStorageInfoResult> {\n        this.ensurePersistence();\n        return Promise.resolve({\n            totalCount: this.internals.documents.size\n        });\n    }\n\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        this.ensurePersistence();\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ],\n            false\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        const lastDoc = lastOfArray(rows);\n        return Promise.resolve({\n            documents: rows,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        });\n    }\n\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        this.ensurePersistence();\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ],\n            false\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    getAttachmentData(\n        documentId: string,\n        attachmentId: string,\n        digest: string\n    ): Promise<string> {\n        this.ensurePersistence();\n        ensureNotRemoved(this);\n        const key = attachmentMapKey(documentId, attachmentId);\n        const data = this.internals.attachments.get(key);\n\n        if (\n            !digest ||\n            !data ||\n            data.digest !== digest\n        ) {\n            throw new Error('attachment does not exist: ' + key);\n        }\n        return Promise.resolve(data.writeData.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.internals.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        if (this.closed) {\n            throw new Error('closed');\n        }\n        this.ensurePersistence();\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(\n                this.databaseName,\n                this.collectionName,\n                this.schema.version\n            )\n        );\n        await this.close();\n    }\n\n    close(): Promise<void> {\n        OPEN_MEMORY_INSTANCES.delete(this);\n\n        this.ensurePersistence();\n        if (this.closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        this.closed = true;\n\n        this.internals.refCount = this.internals.refCount - 1;\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(\n        params.databaseName,\n        params.collectionName,\n        params.schema.version\n    );\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            schema: params.schema,\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject(),\n            changes$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        /**\n         * Ensure that the storage was not already\n         * created with a different schema.\n         * This is very important because if this check\n         * does not exist here, we have hard-to-debug problems\n         * downstream.\n         */\n        if (\n            params.devMode &&\n            !deepEqual(internals.schema, params.schema)\n        ) {\n            throw new Error('storage was already created with a different schema');\n        }\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}