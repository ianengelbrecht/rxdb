{"version":3,"file":"index.js","names":["BehaviorSubject","combineLatest","filter","firstValueFrom","mergeMap","Subject","getPrimaryFieldOfPrimaryKey","clone","ensureNotFalsy","PROMISE_RESOLVE_VOID","getCheckpointKey","startReplicationDownstream","docStateToWriteDoc","writeDocToDocState","startReplicationUpstream","fillWriteDataForAttachmentsChange","replicateRxStorageInstance","input","checkpointKeyPromise","state","primaryPath","forkInstance","schema","primaryKey","hasAttachments","attachments","checkpointKey","downstreamBulkWriteFlag","then","events","canceled","active","down","up","processed","resolvedConflicts","error","stats","addNewTask","downstreamProcessChanges","downstreamResyncOnce","masterChangeStreamEmit","persistFromMaster","forkChangeStreamEmit","persistToMaster","persistToMasterConflictWrites","persistToMasterHadConflicts","processTasks","upstreamInitialSync","firstSyncDone","streamQueue","checkpointQueue","lastCheckpointDoc","awaitRxStorageReplicationFirstInSync","pipe","v","awaitRxStorageReplicationInSync","replicationState","Promise","all","awaitRxStorageReplicationIdle","rxStorageInstanceToReplicationHandler","instance","conflictHandler","databaseInstanceToken","keepMeta","replicationHandler","masterChangeStream$","changeStream","eventBulk","ret","checkpoint","documents","map","event","docData","documentData","undefined","masterChangesSince","batchSize","getChangedDocumentsSince","result","length","plainDocumentData","masterWrite","rows","rowById","forEach","row","docId","newDocumentState","ids","Object","keys","masterDocsStateList","findDocumentsById","masterDocsState","Map","doc","set","conflicts","writeRows","entries","id","masterState","get","push","document","assumedMasterState","realMasterState","isEqual","previous","bulkWrite","err","status","Error","documentInDb","cancelRxStorageReplication","next","complete"],"sources":["../../../src/replication-protocol/index.ts"],"sourcesContent":["/**\n * These files contain the replication protocol.\n * It can be used to replicated RxStorageInstances or RxCollections\n * or even to do a client(s)-server replication.\n */\n\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom,\n    mergeMap,\n    Subject\n} from 'rxjs';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from '../rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    ById,\n    DocumentsWithCheckpoint,\n    RxConflictHandler,\n    RxDocumentData,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    WithDeleted\n} from '../types/index.d.ts';\nimport {\n    clone,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from '../plugins/utils/index.ts';\nimport {\n    getCheckpointKey\n} from './checkpoint.ts';\nimport { startReplicationDownstream } from './downstream.ts';\nimport { docStateToWriteDoc, writeDocToDocState } from './helper.ts';\nimport { startReplicationUpstream } from './upstream.ts';\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\n\n\nexport * from './checkpoint.ts';\nexport * from './downstream.ts';\nexport * from './upstream.ts';\nexport * from './meta-instance.ts';\nexport * from './conflicts.ts';\nexport * from './helper.ts';\n\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const checkpointKeyPromise = getCheckpointKey(input);\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.forkInstance.schema.primaryKey),\n        hasAttachments: !!input.forkInstance.schema.attachments,\n        input,\n        checkpointKey: checkpointKeyPromise,\n        downstreamBulkWriteFlag: checkpointKeyPromise.then(checkpointKey => 'replication-downstream-' + checkpointKey),\n        events: {\n            canceled: new BehaviorSubject<boolean>(false),\n            active: {\n                down: new BehaviorSubject<boolean>(true),\n                up: new BehaviorSubject<boolean>(true)\n            },\n            processed: {\n                down: new Subject(),\n                up: new Subject()\n            },\n            resolvedConflicts: new Subject(),\n            error: new Subject()\n        },\n        stats: {\n            down: {\n                addNewTask: 0,\n                downstreamProcessChanges: 0,\n                downstreamResyncOnce: 0,\n                masterChangeStreamEmit: 0,\n                persistFromMaster: 0\n            },\n            up: {\n                forkChangeStreamEmit: 0,\n                persistToMaster: 0,\n                persistToMasterConflictWrites: 0,\n                persistToMasterHadConflicts: 0,\n                processTasks: 0,\n                upstreamInitialSync: 0\n            }\n        },\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        },\n        checkpointQueue: PROMISE_RESOLVE_VOID,\n        lastCheckpointDoc: {}\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\nexport function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    ).then(() => { });\n}\n\nexport function awaitRxStorageReplicationInSync(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    return Promise.all([\n        replicationState.streamQueue.up,\n        replicationState.streamQueue.down,\n        replicationState.checkpointQueue\n    ]);\n}\n\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reassigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\n\nexport function rxStorageInstanceToReplicationHandler<RxDocType, MasterCheckpointType>(\n    instance: RxStorageInstance<RxDocType, any, any, MasterCheckpointType>,\n    conflictHandler: RxConflictHandler<RxDocType>,\n    databaseInstanceToken: string,\n    /**\n     * If set to true,\n     * the _meta.lwt from the pushed documents is kept.\n     * (Used in the migration to ensure checkpoints are still valid)\n     */\n    keepMeta: boolean = false\n): RxReplicationHandler<RxDocType, MasterCheckpointType> {\n    const hasAttachments = !!instance.schema.attachments;\n    const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n    const replicationHandler: RxReplicationHandler<RxDocType, MasterCheckpointType> = {\n        masterChangeStream$: instance.changeStream().pipe(\n            mergeMap(async (eventBulk) => {\n                const ret: DocumentsWithCheckpoint<RxDocType, MasterCheckpointType> = {\n                    checkpoint: eventBulk.checkpoint,\n                    documents: await Promise.all(\n                        eventBulk.events.map(async (event) => {\n                            let docData = writeDocToDocState(event.documentData, hasAttachments, keepMeta);\n                            if (hasAttachments) {\n                                docData = await fillWriteDataForAttachmentsChange(\n                                    primaryPath,\n                                    instance,\n                                    clone(docData),\n                                    /**\n                                     * Notice the the master never knows\n                                     * the client state of the document.\n                                     * Therefore we always send all attachments data.\n                                     */\n                                    undefined\n                                );\n                            }\n\n                            return docData;\n                        })\n                    )\n                };\n                return ret;\n            })\n        ),\n        masterChangesSince(\n            checkpoint,\n            batchSize\n        ) {\n            return instance.getChangedDocumentsSince(\n                batchSize,\n                checkpoint\n            ).then(async (result) => {\n                return {\n                    checkpoint: result.documents.length > 0 ? result.checkpoint : checkpoint,\n                    documents: await Promise.all(\n                        result.documents.map(async (plainDocumentData) => {\n                            let docData = writeDocToDocState(plainDocumentData, hasAttachments, keepMeta);\n                            if (hasAttachments) {\n                                docData = await fillWriteDataForAttachmentsChange(\n                                    primaryPath,\n                                    instance,\n                                    clone(docData),\n                                    /**\n                                     * Notice the the master never knows\n                                     * the client state of the document.\n                                     * Therefore we always send all attachments data.\n                                     */\n                                    undefined\n                                );\n                            }\n                            return docData;\n                        })\n                    )\n                };\n            });\n        },\n        async masterWrite(\n            rows\n        ) {\n            const rowById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            rows.forEach(row => {\n                const docId: string = (row.newDocumentState as any)[primaryPath];\n                rowById[docId] = row;\n            });\n            const ids = Object.keys(rowById);\n\n            const masterDocsStateList = await instance.findDocumentsById(\n                ids,\n                true\n            );\n            const masterDocsState = new Map<string, RxDocumentData<RxDocType>>();\n            masterDocsStateList.forEach(doc => masterDocsState.set((doc as any)[primaryPath], doc));\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            const writeRows: BulkWriteRow<RxDocType>[] = [];\n            await Promise.all(\n                Object.entries(rowById)\n                    .map(async ([id, row]) => {\n                        const masterState = masterDocsState.get(id);\n                        if (!masterState) {\n                            writeRows.push({\n                                document: docStateToWriteDoc(databaseInstanceToken, hasAttachments, keepMeta, row.newDocumentState)\n                            });\n                        } else if (\n                            masterState &&\n                            !row.assumedMasterState\n                        ) {\n                            conflicts.push(writeDocToDocState(masterState, hasAttachments, keepMeta));\n                        } else if (\n                            (await conflictHandler({\n                                realMasterState: writeDocToDocState(masterState, hasAttachments, keepMeta),\n                                newDocumentState: ensureNotFalsy(row.assumedMasterState)\n                            }, 'rxStorageInstanceToReplicationHandler-masterWrite')).isEqual === true\n                        ) {\n                            writeRows.push({\n                                previous: masterState,\n                                document: docStateToWriteDoc(databaseInstanceToken, hasAttachments, keepMeta, row.newDocumentState, masterState)\n                            });\n                        } else {\n                            conflicts.push(writeDocToDocState(masterState, hasAttachments, keepMeta));\n                        }\n                    })\n            );\n            if (writeRows.length > 0) {\n                const result = await instance.bulkWrite(\n                    writeRows,\n                    'replication-master-write'\n                );\n                result.error.forEach(err => {\n                    if (err.status !== 409) {\n                        throw new Error('non conflict error');\n                    } else {\n                        conflicts.push(\n                            writeDocToDocState(ensureNotFalsy(err.documentInDb), hasAttachments, keepMeta)\n                        );\n                    }\n                });\n            }\n            return conflicts;\n        }\n    };\n\n    return replicationHandler;\n}\n\n\nexport async function cancelRxStorageReplication(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    replicationState.events.canceled.next(true);\n    replicationState.events.active.up.complete();\n    replicationState.events.active.down.complete();\n    replicationState.events.processed.up.complete();\n    replicationState.events.processed.down.complete();\n    replicationState.events.resolvedConflicts.complete();\n    replicationState.events.canceled.complete();\n    await replicationState.checkpointQueue;\n}\n"],"mappings":"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"}